@{
    ViewBag.Title = "Home Page";
}

@section maSection
{
    <p>Contenu inséré dans la section du layout</p>
}

@section autreSection
{
    <p>Contenu de l'autre section du layout.</p>
}

<h3>RAZOR</h3>
<br />
Razor est moteur de vue (générateur de Vue) utilisé par defaut par Asp.Net pour convertir le contenu des vue.cshtml en pages html à renvoyer au poste client.
<br /> Razor permet la création de fichiers (.cshtml), contenant du html et des expressions (en c#) pour inclure des données dans les vues.
<br /> Razor c'est juste un ensemble de templates qui produisent du html.
<br /> Vue Razor = Template + Data
<br />

@{
    var v1 = 10;
    int n = 100;
    double d = 10.05;
    //Commentaire c#

    //Insertion d'un  texte dans un bloc c#
    @: ceci est un  texte
    <text>
        ceci est un autre texte
    </text>

}
<br />

La valeur de d: @d

@* commentaire en dehors d'un bloc c#' *@

<h3>Afficher le symbole @@</h3>
<p>
    Mon email: test@gmail.com
</p>

@{
    var domaine = "dawan";
    @: test@domaine.fr
    @: test@(domaine).fr
    @: test@@domaine.fr

    //tableau
    string[] clients = { "dawan", "jehann" };

    //dictionnaire
    var mesApps = new Dictionary<string, string>();
    mesApps.Add("app1", "ASP.NET");
    mesApps.Add("app2", "Java");
    mesApps.Add("app3", "PHP");
}
<br />
<h3>Tableaux</h3>
<br />
Client 1: @clients[0]

<br />
<h3>Dictionnaire</h3>
<br />
<p>La seconde valeur du dictionnaire: @mesApps["app2"] </p>
<br />

<h3>Boucle FOR</h3>
<br />
<table>
    @for (int i = 1; i <= 10; i++)
    {
        <tr>
            <td>10</td>
            <td>*</td>
            <td>i</td>
            <td>@(10*i)</td>
        </tr>
    }
</table>

<br />
<h3>Boucle FOREACH</h3>
<br />
@foreach (var item in clients)
{
    <p>@item</p>
}

<br />
<h3>Condition IF/ELSE</h3>
<br />
@{
    var jour = false;
    var time = DateTime.Now;
    if (jour)
    {
        @DateTime.Now;
    }
    else
    {
        @: Pas de date disponible
    }
}
<br />
<h3>Gestion des exception</h3>
<br />
@{
    int a = 0, b = 0;
    try
    {
        b = 5 / a;
    }
    catch (Exception ex)
    {
        <p>Message de l'exception: @ex.Message</p>
    }
}